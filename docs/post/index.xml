<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mastering PostgreSQL</title>
    <link>http://masteringpostgresql.com/post/</link>
    <description>Recent content in Posts on Mastering PostgreSQL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jul 2015 14:08:29 +0200</lastBuildDate>
    
	<atom:link href="http://masteringpostgresql.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL Major Contributor</title>
      <link>http://masteringpostgresql.com/post/postgresql/</link>
      <pubDate>Sat, 18 Jul 2015 14:08:29 +0200</pubDate>
      
      <guid>http://masteringpostgresql.com/post/postgresql/</guid>
      <description>The most notable project I have contributed to is PostgreSQL. I wrote the Extension Packaging feature and the Event Triggers facility, among other contributions.
As a debian maintainer I also participated into building a PostgreSQL repository for all currently supported version of both PostgreSQL and debian, available at apt.postgresql.org, with Christoph Berg and Magnus Hagander.
My main project related to PostgreSQL these days is pgloader which allows loading data into PostgreSQL and include facilities to handle a full database migration from a live database connection!</description>
    </item>
    
    <item>
      <title>pgloader: automated migration to PostgreSQL</title>
      <link>http://masteringpostgresql.com/post/pgloader/</link>
      <pubDate>Sat, 18 Jul 2015 14:08:45 +0200</pubDate>
      
      <guid>http://masteringpostgresql.com/post/pgloader/</guid>
      <description>pgloader is an awesome database migration tool that I wrote, open source and available at http://github.com/dimitri/pgloader. You can use it in a Continuous Integration environment and keep migrating your schema and data until your application tests all pass, then decide to go live with PostgreSQL!
In the general case to migrate from a MySQL to PostgreSQL with pgloader all you need to do is run a single command:
$ pgloader mysql://user@host/dbname pgsql:///dbname  Also supported are SQLite and MicrosoftÂ® SQL Server.</description>
    </item>
    
    <item>
      <title>Open Source Software Engineer</title>
      <link>http://masteringpostgresql.com/post/can-help-you-with/</link>
      <pubDate>Sat, 18 Jul 2015 14:53:21 +0200</pubDate>
      
      <guid>http://masteringpostgresql.com/post/can-help-you-with/</guid>
      <description>I can help you use PostgreSQL in your development environment, be it Go or Java, Erlang or Common Lisp, Python, Ruby or PHP, or something else entirely. It&amp;rsquo;s still PostgreSQL after all&amp;hellip;
The first step here is realizing that your database engine actually is part of your application logic. Any SQL statement you write, even the simplest possible, embeds some logic already: you are projecting a particular set of columns, filtering the result to only a part of the available data set (thanks to the where clause), and you want to receive the result in a known ordering.</description>
    </item>
    
    <item>
      <title>Mastering PostgreSQL in Application Development</title>
      <link>http://masteringpostgresql.com/post/book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://masteringpostgresql.com/post/book/</guid>
      <description>I am writing a book to share my knowledge about how to best use PostgreSQL as an application developer. If you&amp;rsquo;ve evered ask yourself how much should I have my database do for me? this book is for you. If you&amp;rsquo;re thinking that using an ORM might not always be the best option out there, if sometimes you wish SQL was easier to maintain than those concatenated strings with conditionals, then this book can&amp;rsquo;t wait for you!</description>
    </item>
    
  </channel>
</rss>